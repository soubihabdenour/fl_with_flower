from pathlib import Path
import hydra
from hydra.core.hydra_config import HydraConfig
from datasets import disable_progress_bar
from omegaconf import DictConfig, OmegaConf
import flwr as fl

# Custom imports for client, dataset, server, and plotting utilities
from fedavg_mobilnet.client import get_client_fn
from fedavg_mobilnet.dataset import get_data
from fedavg_mobilnet.server import fit_config, weighted_average, get_evaluate_fn
from plot import smooth_plot


@hydra.main(config_path='conf', config_name='base', version_base=None)
def main(cfg: DictConfig):
    """
    Main function to run the federated learning simulation using Flower.

    Args:
        cfg (DictConfig): Configuration object generated by Hydra, containing
        all necessary hyperparameters and settings.
    """

    # Print the current configuration for reference
    print(OmegaConf.to_yaml(cfg))

    # Define the path for saving results, derived from Hydra's output directory
    save_path = Path(HydraConfig.get().runtime.output_dir)

    # Resources to be assigned to each virtual client (based on config)
    client_resources = {
        "num_cpus": cfg.client_resources.num_cpus,
        "num_gpus": cfg.client_resources.num_gpus,
    }

    # Load the federated dataset and the centralized test set
    fds, centralized_testset = get_data(
        partitions_number=cfg.num_clients,
        config=cfg.dataset,
        path=save_path
    )

    # Start the federated learning simulation
    history = fl.simulation.start_simulation(
        client_fn=get_client_fn(fds, num_classes=cfg.model.num_classes),
        num_clients=cfg.num_clients,
        client_resources=client_resources,
        config=fl.server.ServerConfig(num_rounds=cfg.num_rounds),
        strategy=fl.server.strategy.FedAvg(
            fraction_fit=cfg.fraction_train_clients,  # % of clients sampled for training
            fraction_evaluate=0.05,  # % of clients sampled for evaluation
            min_available_clients=3,  # Minimum clients required to proceed with training
            on_fit_config_fn=fit_config,  # Function for setting fit config
            evaluate_metrics_aggregation_fn=weighted_average,  # Aggregation function for metrics
            evaluate_fn=get_evaluate_fn(centralized_testset, cfg.model.num_classes),  # Global evaluation function
        ),
        actor_kwargs={
            "on_actor_init_fn": disable_progress_bar  # Disable progress bars on virtual clients
        },
    )

    # Plot the smoothed history of the simulation results
    smooth_plot(
        data=history,
        title=f"{cfg.dataset.name.split('/')[-1]} - {cfg.dataset.partitioner.name.split('Partitioner')[0]} - {cfg.num_clients} clients with 10 per round",
        path=save_path,
        smoothing_window=cfg.plot.smoothing_window
    )


if __name__ == "__main__":
    # Entry point for the script
    main()